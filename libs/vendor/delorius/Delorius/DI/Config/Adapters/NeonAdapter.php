<?php
namespace Delorius\DI\Config\Adapters;

use Delorius\Core\Object;
use Delorius\DI\Config\Helpers;
use Delorius\DI\Config\IAdapter;
use Delorius\DI\Statement;
use Delorius\Exception\InvalidState;
use Delorius\Neon\Entity;
use Delorius\Neon\Neon;

/**
 * Reading and generating NEON files.
 */
class NeonAdapter extends Object implements IAdapter
{
    /** @internal */
    const INHERITING_SEPARATOR = '<', // child < parent
        PREVENT_MERGING = '!';

    /**
     * Reads configuration from NEON file.
     * @param  string  file name
     * @return array
     */
    public function load($file)
    {
        return $this->process((array)Neon::decode(file_get_contents($file)));
    }


    private function process(array $arr)
    {
        $res = array();
        foreach ($arr as $key => $val) {
            if (is_string($key) && substr($key, -1) === self::PREVENT_MERGING) {
                if (!is_array($val) && $val !== NULL) {
                    throw new InvalidState("Replacing operator is available only for arrays, item '$key' is not array.");
                }
                $key = substr($key, 0, -1);
                $val[Helpers::EXTENDS_KEY] = Helpers::OVERWRITE;

            } elseif (preg_match('#^(\S+)\s+' . self::INHERITING_SEPARATOR . '\s+(\S+)\z#', $key, $matches)) {
                if (!is_array($val) && $val !== NULL) {
                    throw new InvalidState("Inheritance operator is available only for arrays, item '$key' is not array.");
                }
                list(, $key, $val[Helpers::EXTENDS_KEY]) = $matches;
                if (isset($res[$key])) {
                    throw new InvalidState("Duplicated key '$key'.");
                }
            }

            if (is_array($val)) {
                $val = $this->process($val);

            } elseif ($val instanceof Entity) {
                if ($val->value === Neon::CHAIN) {
                    $tmp = NULL;
                    foreach ($this->process($val->attributes) as $st) {
                        $tmp = new Statement(
                            $tmp === NULL ? $st->getEntity() : array($tmp, ltrim($st->getEntity(), ':')),
                            $st->arguments
                        );
                    }
                    $val = $tmp;
                } else {
                    $tmp = $this->process(array($val->value));
                    $val = new Statement($tmp[0], $this->process($val->attributes));
                }
            }
            $res[$key] = $val;
        }
        return $res;
    }


    /**
     * Generates configuration in NEON format.
     * @return string
     */
    public function dump(array $data)
    {
        $tmp = array();
        foreach ($data as $name => $secData) {
            if ($parent = Helpers::takeParent($secData)) {
                $name .= ' ' . self::INHERITING_SEPARATOR . ' ' . $parent;
            }
            $tmp[$name] = $secData;
        }
        array_walk_recursive(
            $data,
            function (& $val) {
                if ($val instanceof Statement) {
                    $val = NeonAdapter::statementToEntity($val);
                }
            }
        );

        return "# generated by Delorius\n\n" . Neon::encode($tmp, Neon::BLOCK);
    }


    /**
     * @return Entity
     * @internal
     */
    public static function statementToEntity(Statement $val)
    {
        array_walk_recursive(
            $val->arguments,
            function (& $val) {
                if ($val instanceof Statement) {
                    $val = NeonAdapter::statementToEntity($val);
                }
            }
        );
        if (is_array($val->getEntity()) && $val->getEntity(0) instanceof Statement) {
            return new Entity(
                Neon::CHAIN,
                array(
                    self::statementToEntity($val->getEntity(0)),
                    new Entity('::' . $val->getEntity(1), $val->arguments)
                )
            );
        } else {
            return new Entity($val->getEntity(), $val->arguments);
        }
    }

}
